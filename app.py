# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/186XFt7ITJJ_2cohxqUqXVLHQSRY7Lcxr
"""

!ngrok config add-authtoken (секрет)

import csv
import codecs

from fastapi import FastAPI, UploadFile, File
from pydantic import BaseModel
from typing import List
from fastapi.responses import JSONResponse, FileResponse
import pandas as pd
import pickle
import nest_asyncio
import uvicorn
from pyngrok import ngrok
from fastapi.responses import StreamingResponse
from io import BytesIO
from fastapi import Request

app = FastAPI()

nest_asyncio.apply()
with open("best_model.pkl", "rb") as f:
    best_model = pickle.load(f)

with open("columns_pred.pkl", "rb") as f:
    columns_pred = pickle.load(f)

with open('scaler.pkl', 'rb') as f:
    scaler = pickle.load(f)

class Item(BaseModel):
    name: str
    year: int
    selling_price: int
    km_driven: int
    fuel: str
    seller_type: str
    transmission: str
    owner: str
    mileage: str
    engine: str
    max_power: str
    torque: str
    seats: float

# Модель входных данных для списка объектов
class Items(BaseModel):
    objects: List[Item]

@app.get("/")
def root():
    return {"message": "Fast API by stundent George Lavrenov AI24 Use /docs to access the API documentation."}



def preprocessing(data):
    df = pd.DataFrame(data)

    # Преобразование числовых данных
    def make_numeric(value):
        value = str(value)
        value = value.split(' ')[0]
        if value == '':  # Проверяем, является ли строка пустой
            return 0
        return float(value)

    df['engine'] = df['engine'].apply(make_numeric)
    df['mileage'] = df['mileage'].apply(make_numeric)
    df['max_power'] = df['max_power'].apply(make_numeric)

    # Приводим к целым числам
    df['engine'] = df['engine'].astype(int)
    df['seats'] = df['seats'].astype(int)

    #Удаляем ненужные  столбцы
    df = df.drop(columns=['torque', 'selling_price', 'name'], errors='ignore')

    # Кодирование категориальных признаков
    categorical_features = ['fuel', 'seller_type', 'transmission', 'owner', 'seats']
    df = pd.get_dummies(df, columns = categorical_features)
    #заполняем колонки нулями если их нет после разницы колонок обученной модели и просто колонок поданного jsona/сsv
    missing_columns = set(columns_pred) - set(df.columns)
    for col in missing_columns:
        df[col] = 0

    df = df[columns_pred]

    scaled_data = scaler.transform(df)

    df = pd.DataFrame(scaled_data, columns=df.columns)


    return df

@app.post("/predict_item")
def predict_item(item: Item) -> JSONResponse:
    data = preprocessing([item.model_dump()])
    prediction = best_model.predict(data)
    return JSONResponse(content={"predicted_price": float(prediction[0])})

@app.post("/predict_items")
async def predict_items(file: UploadFile = File(...)):

    data = pd.read_csv(file.file, encoding="utf-8", sep=",")

    processed_data = preprocessing(data)

    predictions = best_model.predict(processed_data)

    data["predicted_price"] = predictions

    output_file = "predicted_results.csv"

    data.to_csv(output_file, index=False)

    return FileResponse(output_file, filename="predicted_results.csv")

public_url = ngrok.connect(8000)
print(f"Public URL: {public_url}")


uvicorn.run(app, host="0.0.0.0", port=8000)